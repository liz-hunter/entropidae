library(corncob)
library(tidyverse)
# Simulation settings
set.seed(123)
n <- 30         # samples
G <- 100        # genera
M <- sample(10000:50000, n, replace = TRUE)
group <- factor(rep(c("Control", "Treatment"), each = n/2))
# Store p-values
pvals_ab <- numeric(G)
pvals_var <- numeric(G)
# Simulate and test
for (g in 1:G) {
effect <- ifelse(g <= 10, .05, 0)  # true effect for first 10 genera
logit_mu <- -4 + effect * (group == "Treatment")
logit_phi <- -2
mu <- plogis(logit_mu)
phi <- plogis(logit_phi)
alpha <- mu * (1 - phi) / phi
beta <- (1 - mu) * (1 - phi) / phi
Z <- rbeta(n, alpha, beta)
W <- rbinom(n, size = M, prob = Z)
df <- data.frame(W = W, M = M, group = group)
try({
fit <- bbdml(cbind(W, M - W) ~ group, phi.formula = ~ group, data = df)
pvals_ab[g] <- Wald(fit)["groupTreatment", "p_val"]
pvals_var[g] <- Wald(fit, test = "phi")["groupTreatment", "p_val"]
}, silent = TRUE)
}
# FDR thresholds
fdr_thresholds <- seq(0.01, 0.25, by = 0.01)
# Adjust once
padj_ab <- p.adjust(pvals_ab, method = "BH")
padj_var <- p.adjust(pvals_var, method = "BH")
# Build results dataframe correctly
results_df <- tibble(FDR = fdr_thresholds) %>%
rowwise() %>%
mutate(
Num_Abundant = sum(padj_ab < FDR),
Num_Variable = sum(padj_var < FDR)
) %>%
pivot_longer(cols = starts_with("Num_"),
names_to = "Test_Type",
values_to = "Num_Discoveries") %>%
mutate(Test_Type = recode(Test_Type,
Num_Abundant = "Differential Abundance",
Num_Variable = "Differential Variability"))
# Plot like Figure 7
ggplot(results_df, aes(x = Num_Discoveries, y = FDR, color = Test_Type)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_color_manual(values = c("#1b9e77", "#d95f02")) +
labs(x = "False Discovery Rate Threshold",
y = "Number of Significant Genera",
color = "Test Type",
title = "Simulated Discovery Rates vs. FDR Threshold") +
theme_minimal()
summary(pvals_ab)
summary(pvals_var)
library(tidyverse)
# nc = # eggs in control
# pc = probability of control egg in HA media
# nw = # eggs in test group
# pw = probability of wasp group egg in HA media
powerCalc = function(nc, pc, nw, pw, alpha = 0.05, n = 10) {
reject_count <- 0
for (i in 1:n) {
control_high <- rbinom(1, nc, pc)
wasp_high <- rbinom(1, nw, pw)
control_low <- nc - control_high
wasp_low <- nw - wasp_high
tbl <- rbind(c(control_high, control_low),
c(wasp_high, wasp_low))
fish <- fisher.test(tbl)
if (fish$p.value < alpha) {
reject_count <- reject_count + 1
}
}
power_estimate <- reject_count / n
return(power_estimate)
}
powerCalc(100, 0.3, 100, 0.5, alpha = 0.05, n = 1000)
powerCalc(100, 0.3, 100, 0.5, alpha = 0.05, n = 1000)
sample_sizes <- round(seq(from = 10, to = 200, length.out = 10))
power <- numeric(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
n <- sample_sizes[i]
power[i] <- powerCalc(nc = n, pc = 0.3, nw = n, pw = 0.5, alpha = 0.05, n = 1000)
}
power_df <- data.frame(
SampleSize = sample_sizes,
Power = power
)
ggplot(power_df, aes(x = SampleSize, y = Power)) +
geom_line(color = "skyblue") +
geom_point(color = "steelblue") +
labs(title = "Estimated Power vs. Sample Size",
x = "Sample Size per Group",
y = "Estimated Power") +
theme_bw() +
ylim(0, 1)
pw_vals <- seq(0, 1, length.out = 15)
power <- numeric(length(pw_vals))
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power[i] <- powerCalc(nc = 100, pc = 0.3, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
power_df <- data.frame(
Pw = pw_vals,
Power = power
)
ggplot(power_df, aes(x = Pw, y = Power)) +
geom_line(color = "skyblue") +
geom_point(color = "steelblue") +
labs(title = "Estimated Power vs. True Probability",
x = "True Probability",
y = "Estimated Power") +
theme_bw() +
ylim(0, 1)
pw_vals <- seq(0, 1, length.out = 15)
power3 <- numeric(length(pw_vals))
power4 <- numeric(length(pw_vals))
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power3[i] <- powerCalc(nc = 100, pc = 0.3, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power4[i] <- powerCalc(nc = 100, pc = 0.4, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
power_df <- data.frame(
pw = rep(pw_vals, 2),
Power = c(power1, power2),
Condition = rep(c("pc = 0.3", "pc = 0.4"), each = length(pw_vals))
)
ggplot(power_df, aes(x = Pw, y = Power, color=Condition, group=Condition)) +
geom_line() +
geom_point() +
labs(title = "Estimated Power vs. True Probability",
x = "True Probability",
y = "Estimated Power") +
theme_bw() +
ylim(0, 1)
pw_vals <- seq(0, 1, length.out = 15)
power3 <- numeric(length(pw_vals))
power4 <- numeric(length(pw_vals))
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power3[i] <- powerCalc(nc = 100, pc = 0.3, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power4[i] <- powerCalc(nc = 100, pc = 0.4, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
power_df <- data.frame(
pw = rep(pw_vals, 2),
Power = c(power3, power4),
Condition = rep(c("pc = 0.3", "pc = 0.4"), each = length(pw_vals))
)
ggplot(power_df, aes(x = Pw, y = Power, color=Condition, group=Condition)) +
geom_line() +
geom_point() +
labs(title = "Estimated Power vs. True Probability",
x = "True Probability",
y = "Estimated Power") +
theme_bw() +
ylim(0, 1)
pw_vals <- seq(0, 1, length.out = 15)
power3 <- numeric(length(pw_vals))
power4 <- numeric(length(pw_vals))
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power3[i] <- powerCalc(nc = 100, pc = 0.3, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
for (i in seq_along(pw_vals)) {
n <- pw_vals[i]
power4[i] <- powerCalc(nc = 100, pc = 0.4, nw = 100, pw = pw_vals[i], alpha = 0.05, n = 1000)
}
power_df <- data.frame(
Pw = rep(pw_vals, 2),
Power = c(power3, power4),
Condition = rep(c("pc = 0.3", "pc = 0.4"), each = length(pw_vals))
)
ggplot(power_df, aes(x = Pw, y = Power, color=Condition, group=Condition)) +
geom_line() +
geom_point() +
labs(title = "Estimated Power vs. True Probability",
x = "True Probability",
y = "Estimated Power") +
theme_bw() +
ylim(0, 1)
powerCalc(100, 0.3, 100, 0.5, alpha = 0.05, n = 1000)
# nc = # eggs in control
# pc = probability of control egg in HA media
# nw = # eggs in test group
# pw = probability of wasp group egg in HA media
powerCalc(100, 0.3, 100, 0.4, alpha = 0.05, n = 1000)
powerCalc(500, 0.3, 500, 0.4, alpha = 0.05, n = 1000)
powerCalc(400, 0.3, 400, 0.4, alpha = 0.05, n = 1000)
powerCalc(350, 0.3, 350, 0.4, alpha = 0.05, n = 1000)
powerCalc(380, 0.3, 380, 0.4, alpha = 0.05, n = 1000)
powerCalc(370, 0.3, 370, 0.4, alpha = 0.05, n = 1000)
powerCalc(375, 0.3, 375, 0.4, alpha = 0.05, n = 1000)
powerCalc(380, 0.3, 380, 0.4, alpha = 0.05, n = 1000)
powerCalc(380, 0.3, 380, 0.8, alpha = 0.05, n = 1000)
powerCalc(300, 0.3, 300, 0.8, alpha = 0.05, n = 1000)
powerCalc(100, 0.3, 100, 0.8, alpha = 0.05, n = 1000)
powerCalc(10, 0.3, 10, 0.8, alpha = 0.05, n = 1000)
powerCalc(20, 0.3, 20, 0.8, alpha = 0.05, n = 1000)
powerCalc(15, 0.3, 15, 0.8, alpha = 0.05, n = 1000)
powerCalc(18, 0.3, 18, 0.8, alpha = 0.05, n = 1000)
powerCalc(17, 0.3, 17, 0.8, alpha = 0.05, n = 1000)
powerCalc(18, 0.3, 18, 0.8, alpha = 0.05, n = 1000)
yfv = read.table(file = "http://life.umd.edu/biology/plfj/biostatlab/yfv.txt", sep = "\t", quote = "", header = TRUE)
View(yfv)
yfv = read.table(file = "http://life.umd.edu/biology/plfj/biostatlab/yfv.txt", sep = "\t", quote = "", header = TRUE)
# Day 7 vs Day 11
ggplot(yfv, aes(x = day7, y = day11)) +
geom_point(color = "darkorange", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "CD8 Activation: Day 7 vs Day 11",
x = "Day 7 % Activated CD8 T Cells",
y = "Day 11 % Activated CD8 T Cells"
) +
theme_minimal()
yfv = read.table(file = "http://life.umd.edu/biology/plfj/biostatlab/yfv.txt", sep = "\t", quote = "", header = TRUE)
# Day 7 vs Day 11
ggplot(yfv, aes(x = CD8.7, y = CD8.11)) +
geom_point(color = "darkorange", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "CD8 Activation: Day 7 vs Day 11",
x = "Day 7 % Activated CD8 T Cells",
y = "Day 11 % Activated CD8 T Cells"
) +
theme_minimal()
# Day 11 vs Day 14
ggplot(yfv, aes(x = CD8.11, y = CD8.14)) +
geom_point(color = "steelblue", size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "CD8 Activation: Day 11 vs Day 14",
x = "Day 11 % Activated CD8 T Cells",
y = "Day 14 % Activated CD8 T Cells"
) +
theme_minimal()
yfv = read.table(file = "http://life.umd.edu/biology/plfj/biostatlab/yfv.txt", sep = "\t", quote = "", header = TRUE)
# Day 7 vs Day 11
ggplot(yfv, aes(x = CD8.7, y = CD8.11)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "black") +
labs(
title = "CD8 Activation: Day 7 vs Day 11",
x = "Day 7 % Activated CD8 T Cells",
y = "Day 11 % Activated CD8 T Cells"
) +
theme_minimal()
# Day 11 vs Day 14
ggplot(yfv, aes(x = CD8.11, y = CD8.14)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(
title = "CD8 Activation: Day 11 vs Day 14",
x = "Day 11 % Activated CD8 T Cells",
y = "Day 14 % Activated CD8 T Cells"
) +
theme_minimal()
yfv = read.table(file = "http://life.umd.edu/biology/plfj/biostatlab/yfv.txt", sep = "\t", quote = "", header = TRUE)
# Day 7 vs Day 11
ggplot(yfv, aes(x = CD8.7, y = CD8.11)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "CD8 Activation: Day 7 vs Day 11",
x = "Day 7 % Activated CD8 T Cells",
y = "Day 11 % Activated CD8 T Cells"
) +
theme_minimal()
# Day 11 vs Day 14
ggplot(yfv, aes(x = CD8.11, y = CD8.14)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "CD8 Activation: Day 11 vs Day 14",
x = "Day 11 % Activated CD8 T Cells",
y = "Day 14 % Activated CD8 T Cells"
) +
theme_minimal()
cor(CD8.7, CD8.11)
yfv %>% cor(CD8.7, CD8.11)
cor(yfv$CD8.7, yfv$CD8.11)
cor(yfv$CD8.7, yfv$CD8.11)
cor(yfv$CD8.11, yfv$CD8.14)
n <- 1000
diffs <- numeric(n_boot)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$day7, boot_sample$day11, use = "complete.obs")
r2 <- cor(boot_sample$day11, boot_sample$day14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
n <- 1000
diffs <- numeric(n_boot)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$day7, boot_sample$day11, use = "complete.obs")
r2 <- cor(boot_sample$day11, boot_sample$day14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
n <- 1000
diffs <- numeric(n_boot)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
# 95% confidence interval
ci <- quantile(diffs, probs = c(0.025, 0.975))
ci
n <- 1000
diffs <- numeric(n_boot)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
# 95% confidence interval
ci <- quantile(diffs, probs = c(0.025, 0.975))
ci
n <- 1000
diffs <- numeric(n_boot)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
n <- 1000
diffs <- numeric(n)
for (i in 1:n) {
# Sample individuals with replacement
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
# Correlations
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
# Difference in correlation
diffs[i] <- r2 - r1
}
# 95% confidence interval
ci <- quantile(diffs, probs = c(0.025, 0.975))
ci
n <- 1000
diffs <- numeric(n)
for (i in 1:n) {
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
diffs[i] <- r2 - r1
}
# 95% confidence interval
ci <- quantile(diffs, probs = c(0.025, 0.975))
ci
n <- 1000
diffs <- numeric(n)
for (i in 1:n) {
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
diffs[i] <- r2 - r1
}
ci <- quantile(diffs, probs = c(0.025, 0.975))
ci
n <- 1000
diffs <- numeric(n)
for (i in 1:n) {
sample_indices <- sample(1:nrow(yfv), replace = TRUE)
boot_sample <- yfv[sample_indices, ]
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
diffs[i] <- r2 - r1
}
quantile(diffs, probs = c(0.025, 0.975))
n <- 1000
diffs <- numeric(n)
for (i in 1:n) {
# Resample Day 7–11 pairs
idx_7_11 <- sample(1:nrow(yfv), replace = TRUE)
boot_7_11 <- yfv[idx_7_11, c("day7", "day11")]
# Resample Day 11–14 pairs
idx_11_14 <- sample(1:nrow(yfv), replace = TRUE)
boot_11_14 <- yfv[idx_11_14, c("day11", "day14")]
r1 <- cor(boot_sample$CD8.7, boot_sample$CD8.11, use = "complete.obs")
r2 <- cor(boot_sample$CD8.11, boot_sample$CD8.14, use = "complete.obs")
diffs[i] <- r2 - r1
}
n <- 1000
diffs_wrong <- numeric(n)
for (i in 1:n_boot) {
# Resample CD8.7 and CD8.11 pair
idx_7_11 <- sample(1:nrow(yfv), replace = TRUE)
boot_7_11 <- yfv[idx_7_11, c("CD8.7", "CD8.11")]
# Resample CD8.11 and CD8.14 pair
idx_11_14 <- sample(1:nrow(yfv), replace = TRUE)
boot_11_14 <- yfv[idx_11_14, c("CD8.11", "CD8.14")]
# Compute correlations (complete.obs in case of missing values)
r1 <- cor(boot_7_11$CD8.7, boot_7_11$CD8.11, use = "complete.obs")
r2 <- cor(boot_11_14$CD8.11, boot_11_14$CD8.14, use = "complete.obs")
# Difference
diffs_wrong[i] <- r2 - r1
}
# 95% confidence interval (incorrect)
ci_wrong <- quantile(diffs_wrong, c(0.025, 0.975))
ci_wrong
n <- 1000
diffs_wrong <- numeric(n)
for (i in 1:n) {
# Resample CD8.7 and CD8.11 pair
idx_7_11 <- sample(1:nrow(yfv), replace = TRUE)
boot_7_11 <- yfv[idx_7_11, c("CD8.7", "CD8.11")]
# Resample CD8.11 and CD8.14 pair
idx_11_14 <- sample(1:nrow(yfv), replace = TRUE)
boot_11_14 <- yfv[idx_11_14, c("CD8.11", "CD8.14")]
# Compute correlations (complete.obs in case of missing values)
r1 <- cor(boot_7_11$CD8.7, boot_7_11$CD8.11, use = "complete.obs")
r2 <- cor(boot_11_14$CD8.11, boot_11_14$CD8.14, use = "complete.obs")
# Difference
diffs_wrong[i] <- r2 - r1
}
# 95% confidence interval (incorrect)
ci_wrong <- quantile(diffs_wrong, c(0.025, 0.975))
ci_wrong
n <- 1000
diffs_wrong <- numeric(n)
for (i in 1:n) {
idx_7_11 <- sample(1:nrow(yfv), replace = TRUE)
boot_7_11 <- yfv[idx_7_11, c("CD8.7", "CD8.11")]
idx_11_14 <- sample(1:nrow(yfv), replace = TRUE)
boot_11_14 <- yfv[idx_11_14, c("CD8.11", "CD8.14")]
r1 <- cor(boot_7_11$CD8.7, boot_7_11$CD8.11, use = "complete.obs")
r2 <- cor(boot_11_14$CD8.11, boot_11_14$CD8.14, use = "complete.obs")
diffs_wrong[i] <- r2 - r1
}
# 95% confidence interval (incorrect)
quantile(diffs_wrong, c(0.025, 0.975))
library(tidyverse)
library(data.table)
library(data.tree)
install.packages("data.tree")
library(data.tree)
# Set wd
setwd("/Users/elizabeth.hunter/Library/CloudStorage/OneDrive-FDA/Documents/current_projects/entropy/entropidae/06-entropy/")
# Load nodes
nodes <- fread("taxdump/nodes.dmp", sep="|", header=FALSE, quote="", stringsAsFactors=FALSE)
setnames(nodes, c("tax_id", "parent_id", "rank"), c(1, 2, 3))
View(nodes)
setnames(nodes, c("tax_id", "parent_id", "rank"), c(1, 2, 3))
setnames(nodes, old = names(nodes)[1:3], new = c("tax_id", "parent_id", "rank"))
View(nodes)
View(nodes)
# Build tree structure
tax_nodes <- nodes[, .(tax_id = as.integer(V1),
parent_id = as.integer(V2),
rank = trimws(V3))]
# Set working directory
setwd("/Users/elizabeth.hunter/Library/CloudStorage/OneDrive-FDA/Documents/current_projects/entropy/entropidae/06-entropy/")
# Read in the raw taxonomy node data
nodes <- fread("nodes.dmp", sep = "|", header = FALSE, quote = "", stringsAsFactors = FALSE)
# Read in the raw taxonomy node data
nodes <- fread("taxdump/nodes.dmp", sep = "|", header = FALSE, quote = "", stringsAsFactors = FALSE)
# Extract only the columns we care about: tax_id, parent_tax_id, rank
tax_nodes <- nodes[, .(tax_id = as.integer(V1),
parent_id = as.integer(V2),
rank = trimws(V3))]
# Build a parent lookup table: named vector where names = tax_id, values = parent_id
parent_map <- setNames(tax_nodes$parent_id, tax_nodes$tax_id)
# Function to trace a taxid's lineage up to the root
get_lineage <- function(taxid) {
path <- c()
while (!is.na(taxid) && taxid != 1) {
path <- c(taxid, path)
taxid <- parent_map[as.character(taxid)]
}
return(c(1, path))  # include root node (1)
}
get_lineage(562)
View(get_lineage)
